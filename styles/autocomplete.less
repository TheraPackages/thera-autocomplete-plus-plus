// TODO: remove this fallback when 193 is out for a while
.attr-syntax-color() { @syntax-color-attribute: #888; } .attr-syntax-color();

@import "ui-variables";
@import "syntax-variables";


@font-size-small: .9em;
@type-icon-font-size: 1em;
@type-letter-icon-font-size: @font-size-small;
@row-line-height: 2em;
@item-padding: .75em;
@item-side-padding: .6em;

atom-overlay.thera-autocomplete-plus-plus {
  background-color: hsla(1, 0%, 10%, 20%) !important;
  z-index: 5;
}

autocomplete-suggestion-list.select-list.popover-list {
  background-color: hsla(1, 0%, 10%, 20%) !important;
  width: auto;
  display: inline-block;
  min-width: 200px;
  max-width: 800px;
  padding: 0;
  overflow: hidden;
  color: @text-color;

  .suggestion-list-scroller {
    overflow-y: auto;
  }

  .suggestion-description {
    background-color: hsla(1, 0%, 0%, 80%) !important;
    padding: 5px 0;
    padding-left: @item-side-padding;
    padding-right: @item-side-padding;
    min-height: @row-line-height;
    line-height: 1.3;

    background: darken(@overlay-background-color, 4%);
    border-radius: 0 0 @component-border-radius @component-border-radius;
  }

  .suggestion-description-content {
    font-size: @font-size + 1px;
    font-family: @font-family;
  }

  .suggestion-description-more-link {
    font-size: @font-size + 1px;
    font-family: @font-family;
    color: @text-color-info;
  }

  input {
    position: absolute;
    opacity: 0.00;
  }

  ol.list-group {
    margin-top: 0;
    display: table;
    width: 100%;
    margin-right: 10px; // Needed to prevent horizontal scrolling when right label is too long
    background-color: hsla(1, 0%, 0%, 75%);
    li {
      display: table-row;
      color: @text-color;
      line-height: @row-line-height;

      > span {
        display: table-cell;
        vertical-align: middle;
      }

      &:after {
        clear: both;
        display: block;
        content: ' ';
      }

      &.selected-autocomplate {
        .word {
          color: hsl(50, 100%, 80%) !important;
        }
        .character-match {
          color: hsl(330, 100%, 50%) !important;
          font-weight: bolder;
        }
        .left-label, .right-label, .snippet-completion {
          // color: hsl(50, 100%, 65%);
        }

        background-color: hsla(190, 100%, 40%, 70%);
      }
    }
  }
}

autocomplete-suggestion-list {
  // background-color: hsla(1, 0%, 10%, 100%) !important;
  .icon-container {
    width: @row-line-height;
    padding-left: 0;
    padding-right: @item-padding;
    &:empty {
      width: @item-side-padding;
      padding: 0;
    }
  }

  .icon {
    display: block;
    width: @row-line-height;
    line-height: @row-line-height;
    text-align: center;
    font-style: normal;
    font-weight: bold;

    color: @text-color-subtle;
    background: fadeout(@text-color, 90%);

    &:empty { display: none; }
    > *::before {
      font-size: @type-icon-font-size;
      width: @type-icon-font-size;
      height: @type-icon-font-size;
    }

    .icon-letter {
      // I'm failing to vert center these letters. So shift them up...
      position: relative;
      top: -.1em;
      font-size: @type-letter-icon-font-size;
      line-height: @type-letter-icon-font-size;
    }
  }

  .left-label {
    text-align: right;
    padding-right: @item-padding;
    vertical-align: middle;

    font-size: @font-size-small;
    color: @text-color-subtle;

    &:empty {
      padding-right: 0;
    }
  }

  .right-label {
    padding-right: @item-padding;
    font-size: @font-size-small;
    color: @text-color-subtle;

    &:empty {
      padding-right: 0;
    }
  }

  .word-container {
    padding-right: @item-padding;
  }

  .word {
    float: left;
  }

  .character-match {
    font-weight: bold;
    color: @text-color-highlight;
  }

  .snippet-completion {
    color: @text-color-subtle;
  }

  // Here we set the max width of the popup
  .word, .left-label, .right-label {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .left-label {
    max-width: 150px;
  }

  .right-label {
    max-width: 150px;
  }

  .word {
    max-width: 430px; // magic number to also fit the icon-container + scrollbar in the 800px max-width
  }

  .make-type-icon(attribute, @syntax-color-attribute);
  .make-type-icon(builtin, @syntax-color-keyword);
  .make-type-icon(class, @syntax-color-class);
  .make-type-icon(constant, @syntax-color-constant);
  .make-type-icon(function, @syntax-color-function);
  .make-type-icon(import, @syntax-color-import);
  .make-type-icon(keyword, @syntax-color-keyword);
  .make-type-icon(method, @syntax-color-method);
  .make-type-icon(module, @syntax-color-import);
  .make-type-icon(mixin, @syntax-color-class);
  .make-type-icon(package, @syntax-color-import);
  .make-type-icon(property, @syntax-color-property);
  .make-type-icon(require, @syntax-color-import);
  .make-type-icon(snippet, @syntax-color-snippet);
  .make-type-icon(tag, @syntax-color-tag);
  .make-type-icon(type, @syntax-color-class);
  .make-type-icon(value, @syntax-color-value);
  .make-type-icon(variable, @syntax-color-variable);
  .make-type-icon(selector, @syntax-color-attribute);
  .make-type-icon(pseudo-selector, @syntax-color-attribute);
}

.make-type-icon(@type, @color) {
  .icon.@{type} {
    color: @color;
    background: fadeout(@color, 80%)
  }
}
.make-type-icon(@type, @color)
when (hsvvalue(@color) - hsvvalue(@overlay-background-color) > -20)
and (hsvvalue(@color) - hsvvalue(@overlay-background-color) < 20) {
  .icon.@{type} {
    @corrected-color: contrast(@overlay-background-color, darken(@color, 30%), lighten(@color, 30%));
    color: @corrected-color;
    background: fadeout(@corrected-color, 80%);
  }
}

.mainContext-box-main {
  width: 550px;
  height: auto;
  margin: 0;
  padding: 0;
  position: relative;
  margin-left: auto;
  margin-right: auto;
}

.leftContext-box-left {
  float: left;
  width: 250px;
}


.rightContext-box-right {
  -webkit-user-select:all;
  user-select: all;

  float: right;
  width: 300px;
  height: auto;
  background-color: #FFFFFF;
  overflow:auto;

}

.suggestionContent{
  background-color: #FFFFFF;
  width: 100%;

}

.detail-text{
  font-family: 'News Cycle', sans-serif;
  font-size: 12px;
  color: grey;
  code{
    color: #ec8c1e !important;
    background-color:transparent;
  }


}




.suggestDetail{
  margin-left: 5px;
  font-family: 'News Cycle', sans-serif !important;

  .div-explain-element {
    display: block;

  }

}

.div-example-element{
  background: ghostwhite;
  font-size: 12px;
}

.mytheme{
  .comment,
.quote {
  color: #8e908c;
}

/* Tomorrow Red */
.variable,
.template-variable,
.tag,
.name,
.selector-id,
.selector-class,
.regexp,
.deletion {
  color: #c82829;
}

/* Tomorrow Orange */
.number,
.built_in,
.builtin-name,
.literal,
.type,
.params,
.meta,
.link {
  color: #f5871f;
}

/* Tomorrow Yellow */
.attribute {
  color: #eab700;
}

/* Tomorrow Green */
.string,
.symbol,
.bullet,
.addition {
  color: #718c00;
}

/* Tomorrow Blue */
.title,
.section {
  color: #4271ae;
}

/* Tomorrow Purple */
.keyword,
.selector-tag {
  color: #8959a8;
}

.hljs {
  display: block;
  overflow-x: auto;
  background: gainsboro;
  color: #4d4d4c;
  padding: 0.5em;
  border-radius:1px;
  border: 0px solid #000000;

}

.emphasis {
  font-style: italic;
}

.strong {
  font-weight: bold;
}

}
